function e({namespace:e=globalThis||window,fetch:n=e.fetch}={}){if(null==e&&(e=globalThis||window),"object"!=typeof e)throw new Error("[xfetch-middleware] - `namespace` should be an object");if("function"!=typeof n)throw new Error("[xfetch-middleware] - `fetch` should be a function");if("function"==typeof n.onRequest)return n.stopIntercepting;const t="fetch",o=[];async function r(...e){const t=[];let r=new Request(...e),u=null,f=null,s=null,c=null;for(const e of o){let o=await e({request:r,fetch:n,get url(){return s||(e=r.url,s=new URL(e));var e},get headers(){return c||(e=r.headers,c=[...e.entries()].reduce(((e,[n,t])=>(e[n]=t,e)),{}));var e}});o&&(o.request instanceof Request&&(r=o.request),o.response instanceof Response&&(u=o.response),"function"==typeof o.listen&&t.push(o.listen),"string"==typeof o.as&&(f=o.as))}async function i(e){let n=f&&"function"==typeof e[f];return t.forEach((t=>{const o=e.clone();n?o[f]().then(t):t(o)})),e}return u?i(u):n(r).then(i)}function u(){e.fetch=n}return Object.defineProperty(r,"name",{value:t,configurable:!0}),e.fetch=r,r.stopIntercepting=u,r.onRequest=function(e){if("function"!=typeof e)throw new Error("[onRequest] - Argument must be a function");return o.find((n=>n===e))||function(e){o.push(e)}(e),()=>{}},u}export{e as default};